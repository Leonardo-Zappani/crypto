/**
 * Demonstra√ß√£o do Sistema de Comunica√ß√£o Segura
 * Alice envia uma mensagem criptografada para Bob
 */

const User = require('./users/user');
const { CertificateAuthority } = require('./crypto/certificate');

console.log('='.repeat(70));
console.log('SISTEMA DE COMUNICA√á√ÉO SEGURA - TRABALHO PR√ÅTICO');
console.log('='.repeat(70));
console.log();

// 1. Criar a Autoridade Certificadora (CA)
console.log('1. Criando Autoridade Certificadora (CA)...');
const ca = new CertificateAuthority('Academic CA');
console.log('   ‚úì CA criada com sucesso');
console.log();

// 2. Criar usu√°rios Alice e Bob
console.log('2. Criando usu√°rios Alice e Bob...');
const alice = new User('Alice');
const bob = new User('Bob');
console.log('   ‚úì Alice criada com par de chaves RSA');
console.log('   ‚úì Bob criado com par de chaves RSA');
console.log();

// 3. Emitir certificados para Alice e Bob
console.log('3. Emitindo certificados digitais...');
const aliceCertificate = ca.issueCertificate('Alice', alice.publicKey);
const bobCertificate = ca.issueCertificate('Bob', bob.publicKey);
alice.setCertificate(aliceCertificate);
bob.setCertificate(bobCertificate);
console.log('   ‚úì Certificado emitido para Alice');
console.log('   ‚úì Certificado emitido para Bob');
console.log();

// 4. Alice envia mensagem para Bob
console.log('4. Alice preparando mensagem para Bob...');
const originalMessage = 'Ol√° Bob! Esta √© uma mensagem secreta e segura. üîê';
console.log(`   Mensagem original: "${originalMessage}"`);
console.log();

console.log('5. Criptografando mensagem...');
const messagePackage = alice.sendSecureMessage(originalMessage, bob);
console.log('   ‚úì Hash SHA-256 calculado para integridade');
console.log('   ‚úì Chave sim√©trica AES-256 gerada');
console.log('   ‚úì Mensagem criptografada com AES-256-CBC');
console.log('   ‚úì Chave sim√©trica criptografada com RSA (chave p√∫blica de Bob)');
console.log('   ‚úì Assinatura digital criada com chave privada de Alice');
console.log();

console.log('6. Pacote de mensagem criado:');
console.log(`   De: ${messagePackage.from}`);
console.log(`   Para: ${messagePackage.to}`);
console.log(`   Timestamp: ${messagePackage.timestamp}`);
console.log(`   Tamanho do ciphertext: ${messagePackage.ciphertext.length} bytes`);
console.log();

// 7. Bob recebe e descriptografa a mensagem
console.log('7. Bob recebendo e validando mensagem...');
const result = bob.receiveSecureMessage(messagePackage);

console.log();
console.log('8. Resultados da valida√ß√£o:');
console.log(`   ‚úì Certificado v√°lido: ${result.validations.certificateValid ? '‚úì SIM' : '‚úó N√ÉO'}`);
console.log(`   ‚úì Assinatura v√°lida: ${result.validations.signatureValid ? '‚úì SIM' : '‚úó N√ÉO'}`);
console.log(`   ‚úì Integridade verificada: ${result.validations.integrityValid ? '‚úì SIM' : '‚úó N√ÉO'}`);
console.log();

if (result.success) {
  console.log('9. Mensagem descriptografada com sucesso:');
  console.log(`   "${result.message}"`);
  console.log();
  console.log('‚úì COMUNICA√á√ÉO SEGURA ESTABELECIDA COM SUCESSO!');
  console.log();
  console.log('Conceitos demonstrados:');
  console.log('  ‚Ä¢ Hash (SHA-256): Verifica√ß√£o de integridade');
  console.log('  ‚Ä¢ Criptografia Sim√©trica (AES-256): Prote√ß√£o do conte√∫do');
  console.log('  ‚Ä¢ Criptografia Assim√©trica (RSA): Troca segura da chave');
  console.log('  ‚Ä¢ Assinatura Digital: Autentica√ß√£o do remetente');
  console.log('  ‚Ä¢ Certificado Digital: Valida√ß√£o da identidade');
} else {
  console.log('‚úó FALHA NA COMUNICA√á√ÉO!');
  console.log('Erros:');
  result.errors.forEach(error => console.log(`  ‚Ä¢ ${error}`));
}

console.log();
console.log('='.repeat(70));
console.log();

// 10. Demonstra√ß√£o de adultera√ß√£o
console.log('10. TESTE DE SEGURAN√áA: Simulando adultera√ß√£o da mensagem...');
console.log();

const tamperedPackage = { ...messagePackage };
tamperedPackage.ciphertext = Buffer.from('mensagem adulterada').toString('base64');

console.log('    Tentando descriptografar mensagem adulterada...');
const tamperedResult = bob.receiveSecureMessage(tamperedPackage);

console.log();
console.log('    Resultados da valida√ß√£o:');
console.log(`    ‚úì Certificado v√°lido: ${tamperedResult.validations.certificateValid ? '‚úì SIM' : '‚úó N√ÉO'}`);
console.log(`    ‚úì Assinatura v√°lida: ${tamperedResult.validations.signatureValid ? '‚úó SIM' : '‚úì N√ÉO (como esperado)'}`);
console.log(`    ‚úì Integridade verificada: ${tamperedResult.validations.integrityValid ? '‚úì SIM' : '‚úó N√ÉO'}`);
console.log();

if (!tamperedResult.success) {
  console.log('    ‚úì SISTEMA DETECTOU ADULTERA√á√ÉO CORRETAMENTE!');
  console.log('    Erros detectados:');
  tamperedResult.errors.forEach(error => console.log(`      ‚Ä¢ ${error}`));
} else {
  console.log('    ‚úó FALHA: Sistema n√£o detectou adultera√ß√£o!');
}

console.log();
console.log('='.repeat(70));
console.log('Demonstra√ß√£o conclu√≠da!');
console.log('='.repeat(70));
