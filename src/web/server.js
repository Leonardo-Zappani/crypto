/**
 * Servidor Web para Interface de Demonstra√ß√£o
 * Sistema de Comunica√ß√£o Segura - Alice e Bob
 */

const express = require('express');
const path = require('path');
const User = require('../users/user');
const { CertificateAuthority } = require('../crypto/certificate');

const app = express();
const PORT = 3000;

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Inicializa CA e usu√°rios
let ca, alice, bob;

function initializeSystem() {
  // Criar CA
  ca = new CertificateAuthority('Academic CA');

  // Criar Alice e Bob
  alice = new User('Alice');
  bob = new User('Bob');

  // Emitir certificados
  const aliceCert = ca.issueCertificate('Alice', alice.publicKey);
  const bobCert = ca.issueCertificate('Bob', bob.publicKey);

  alice.setCertificate(aliceCert);
  bob.setCertificate(bobCert);

  console.log('‚úì Sistema inicializado: CA, Alice e Bob prontos');
}

// Inicializa ao startar
initializeSystem();

// Endpoint: Reiniciar sistema
app.post('/api/reset', (req, res) => {
  try {
    initializeSystem();
    res.json({
      success: true,
      message: 'Sistema reiniciado com sucesso'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint: Alice envia mensagem para Bob
app.post('/api/send-message', (req, res) => {
  try {
    const { message, sender, recipient } = req.body;

    let senderUser, recipientUser;

    // Determina quem envia e quem recebe
    if (sender === 'Alice' && recipient === 'Bob') {
      senderUser = alice;
      recipientUser = bob;
    } else if (sender === 'Bob' && recipient === 'Alice') {
      senderUser = bob;
      recipientUser = alice;
    } else {
      throw new Error('Remetente ou destinat√°rio inv√°lido');
    }

    // Cria logs detalhados do processo
    const logs = [];

    logs.push({
      step: 1,
      action: 'Iniciando processo de envio',
      description: `${sender} est√° preparando mensagem para ${recipient}`,
      type: 'info'
    });

    logs.push({
      step: 2,
      action: 'Hash SHA-256 calculado',
      description: 'Hash da mensagem original gerado para verifica√ß√£o de integridade',
      type: 'crypto'
    });

    logs.push({
      step: 3,
      action: 'Chave sim√©trica AES-256 gerada',
      description: 'Chave aleat√≥ria de 256 bits criada para criptografar a mensagem',
      type: 'crypto'
    });

    logs.push({
      step: 4,
      action: 'Mensagem criptografada com AES-256-CBC',
      description: 'Texto original transformado em ciphertext usando chave sim√©trica',
      type: 'crypto'
    });

    logs.push({
      step: 5,
      action: 'Chave sim√©trica criptografada com RSA',
      description: `Chave AES protegida com chave p√∫blica de ${recipient}`,
      type: 'crypto'
    });

    logs.push({
      step: 6,
      action: 'Assinatura digital criada',
      description: `${sender} assinou o ciphertext com sua chave privada`,
      type: 'crypto'
    });

    // Envia a mensagem
    const messagePackage = senderUser.sendSecureMessage(message, recipientUser);

    // ===== CONSOLE LOG DETALHADO DO PACOTE =====
    console.log('\n' + '='.repeat(80));
    console.log(`üì§ ${sender} ‚Üí ${recipient} | Pacote Criptografado Criado`);
    console.log('='.repeat(80));
    console.log(`üìù Mensagem Original: "${message}"`);
    console.log('\nüîê COMPONENTES DO PACOTE CRIPTOGRAFADO:');
    console.log('‚îÄ'.repeat(80));

    console.log('\n1Ô∏è‚É£  CIPHERTEXT (Mensagem Criptografada com AES-256-CBC):');
    console.log(`   Tamanho: ${messagePackage.ciphertext.length} caracteres (base64)`);
    console.log(`   Primeiros 100 chars: ${messagePackage.ciphertext.substring(0, 100)}...`);

    console.log('\n2Ô∏è‚É£  IV (Initialization Vector):');
    console.log(`   Tamanho: ${messagePackage.iv.length} caracteres (base64)`);
    console.log(`   Valor: ${messagePackage.iv}`);

    console.log('\n3Ô∏è‚É£  CHAVE SIM√âTRICA CRIPTOGRAFADA (com RSA):');
    console.log(`   Tamanho: ${messagePackage.encryptedSymmetricKey.length} caracteres (base64)`);
    console.log(`   Primeiros 100 chars: ${messagePackage.encryptedSymmetricKey.substring(0, 100)}...`);

    console.log('\n4Ô∏è‚É£  ASSINATURA DIGITAL (RSA + SHA-256):');
    console.log(`   Tamanho: ${messagePackage.signature.length} caracteres (base64)`);
    console.log(`   Primeiros 100 chars: ${messagePackage.signature.substring(0, 100)}...`);

    console.log('\n5Ô∏è‚É£  HASH SHA-256 (Integridade):');
    console.log(`   Tamanho: ${messagePackage.messageHash.length} caracteres (base64)`);
    console.log(`   Valor: ${messagePackage.messageHash}`);

    console.log('\n6Ô∏è‚É£  CERTIFICADO DIGITAL (Remetente):');
    console.log(`   Titular: ${messagePackage.senderCertificate.subject}`);
    console.log(`   Emissor: ${messagePackage.senderCertificate.issuer}`);
    console.log(`   Serial: ${messagePackage.senderCertificate.serialNumber}`);
    console.log(`   Validade: ${messagePackage.senderCertificate.issuedAt} at√© ${messagePackage.senderCertificate.expiresAt}`);

    console.log('\nüìä METADADOS:');
    console.log(`   De: ${messagePackage.from}`);
    console.log(`   Para: ${messagePackage.to}`);
    console.log(`   Timestamp: ${messagePackage.timestamp}`);

    console.log('\n' + '='.repeat(80));
    console.log('‚úÖ Pacote pronto para transmiss√£o segura!');
    console.log('='.repeat(80) + '\n');

    logs.push({
      step: 7,
      action: 'Pacote de mensagem criado',
      description: 'Todos os componentes empacotados juntos',
      type: 'success'
    });

    res.json({
      success: true,
      messagePackage,
      logs
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint: Receber e descriptografar mensagem
app.post('/api/receive-message', (req, res) => {
  try {
    const { messagePackage, recipient } = req.body;

    let recipientUser;

    // Determina quem recebe
    if (recipient === 'Bob') {
      recipientUser = bob;
    } else if (recipient === 'Alice') {
      recipientUser = alice;
    } else {
      throw new Error('Destinat√°rio inv√°lido');
    }

    // Cria logs detalhados do processo de recebimento
    const logs = [];

    logs.push({
      step: 1,
      action: 'Mensagem recebida',
      description: `${recipient} recebeu pacote criptografado`,
      type: 'info'
    });

    logs.push({
      step: 2,
      action: 'Validando certificado digital',
      description: 'Verificando assinatura, expira√ß√£o e emissor do certificado',
      type: 'validation'
    });

    // ===== CONSOLE LOG DO RECEBIMENTO =====
    console.log('\n' + '='.repeat(80));
    console.log(`üì® ${recipient} | Recebendo e Descriptografando Mensagem`);
    console.log('='.repeat(80));
    console.log(`üì¶ Pacote recebido de: ${messagePackage.from}`);
    console.log(`‚è∞ Timestamp: ${messagePackage.timestamp}`);

    // Recebe e descriptografa
    const result = recipientUser.receiveSecureMessage(messagePackage);

    console.log('\nüîç PROCESSO DE VALIDA√á√ÉO E DESCRIPTOGRAFIA:');
    console.log('‚îÄ'.repeat(80));

    console.log('\n1Ô∏è‚É£  VALIDA√á√ÉO DO CERTIFICADO DIGITAL:');
    console.log(`   Status: ${result.validations.certificateValid ? '‚úÖ V√ÅLIDO' : '‚ùå INV√ÅLIDO'}`);
    if (result.validations.certificateValid) {
      console.log(`   Titular: ${messagePackage.senderCertificate.subject}`);
      console.log(`   Emissor: ${messagePackage.senderCertificate.issuer}`);
      console.log(`   ‚úì Assinatura da CA verificada`);
      console.log(`   ‚úì Certificado n√£o expirado`);
    } else {
      console.log(`   ‚úó Erro: ${result.errors.join(', ')}`);
    }

    console.log('\n2Ô∏è‚É£  VALIDA√á√ÉO DA ASSINATURA DIGITAL:');
    console.log(`   Status: ${result.validations.signatureValid ? '‚úÖ V√ÅLIDA' : '‚ùå INV√ÅLIDA'}`);
    if (result.validations.signatureValid) {
      console.log(`   ‚úì Assinatura verificada com chave p√∫blica de ${messagePackage.from}`);
      console.log(`   ‚úì Remetente autenticado`);
      console.log(`   ‚úì Ciphertext n√£o foi adulterado`);
    } else {
      console.log(`   ‚úó Assinatura n√£o corresponde ao ciphertext`);
      console.log(`   ‚úó Poss√≠vel adultera√ß√£o ou remetente falso`);
    }

    if (result.success) {
      console.log('\n3Ô∏è‚É£  DESCRIPTOGRAFIA DA CHAVE SIM√âTRICA:');
      console.log(`   ‚úì ${recipient} usou chave privada RSA para descriptografar`);
      console.log(`   ‚úì Chave AES-256 recuperada com sucesso`);

      console.log('\n4Ô∏è‚É£  DESCRIPTOGRAFIA DA MENSAGEM:');
      console.log(`   ‚úì Usando chave AES-256 + IV para descriptografar`);
      console.log(`   ‚úì Ciphertext convertido para texto original`);

      console.log('\n5Ô∏è‚É£  VERIFICA√á√ÉO DE INTEGRIDADE (Hash SHA-256):');
      console.log(`   Status: ${result.validations.integrityValid ? '‚úÖ √çNTEGRA' : '‚ùå CORROMPIDA'}`);
      if (result.validations.integrityValid) {
        console.log(`   ‚úì Hash SHA-256 calculado corresponde ao hash original`);
        console.log(`   ‚úì Mensagem n√£o foi alterada durante transmiss√£o`);
      } else {
        console.log(`   ‚úó Hash n√£o corresponde - mensagem foi modificada`);
      }

      console.log('\nüìù MENSAGEM DESCRIPTOGRAFADA:');
      console.log(`   "${result.message}"`);

      console.log('\n' + '='.repeat(80));
      console.log('‚úÖ Mensagem recebida e validada com SUCESSO!');
      console.log('='.repeat(80) + '\n');
    } else {
      console.log('\n' + '='.repeat(80));
      console.log('‚ùå FALHA NA VALIDA√á√ÉO - Mensagem REJEITADA!');
      console.log(`   Erros: ${result.errors.join(', ')}`);
      console.log('='.repeat(80) + '\n');
    }

    if (result.validations.certificateValid) {
      logs.push({
        step: 3,
        action: '‚úì Certificado v√°lido',
        description: 'Certificado verificado com sucesso',
        type: 'success'
      });
    } else {
      logs.push({
        step: 3,
        action: '‚úó Certificado inv√°lido',
        description: result.errors.join(', '),
        type: 'error'
      });
    }

    logs.push({
      step: 4,
      action: 'Verificando assinatura digital',
      description: 'Validando autenticidade com chave p√∫blica do remetente',
      type: 'validation'
    });

    if (result.validations.signatureValid) {
      logs.push({
        step: 5,
        action: '‚úì Assinatura v√°lida',
        description: 'Mensagem autenticada com sucesso',
        type: 'success'
      });
    } else {
      logs.push({
        step: 5,
        action: '‚úó Assinatura inv√°lida',
        description: 'Poss√≠vel adultera√ß√£o detectada',
        type: 'error'
      });
    }

    if (result.success) {
      logs.push({
        step: 6,
        action: 'Descriptografando chave sim√©trica',
        description: `${recipient} usou sua chave privada RSA para recuperar chave AES`,
        type: 'crypto'
      });

      logs.push({
        step: 7,
        action: 'Descriptografando mensagem',
        description: 'Usando chave AES para recuperar texto original',
        type: 'crypto'
      });

      logs.push({
        step: 8,
        action: 'Verificando integridade',
        description: 'Comparando hash SHA-256 da mensagem',
        type: 'validation'
      });

      if (result.validations.integrityValid) {
        logs.push({
          step: 9,
          action: '‚úì Integridade verificada',
          description: 'Hash corresponde - mensagem √≠ntegra',
          type: 'success'
        });
      }

      logs.push({
        step: 10,
        action: '‚úì MENSAGEM DESCRIPTOGRAFADA COM SUCESSO',
        description: 'Todas as valida√ß√µes passaram',
        type: 'success'
      });
    }

    res.json({
      success: result.success,
      message: result.message,
      validations: result.validations,
      errors: result.errors,
      logs
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Endpoint: Simular ataque (adultera√ß√£o)
app.post('/api/tamper-message', (req, res) => {
  try {
    const { messagePackage } = req.body;

    // ===== CONSOLE LOG DO ATAQUE =====
    console.log('\n' + '‚ö†'.repeat(80));
    console.log('‚ö†Ô∏è  SIMULA√á√ÉO DE ATAQUE - ADULTERA√á√ÉO DE MENSAGEM');
    console.log('‚ö†'.repeat(80));
    console.log('üé≠ Cen√°rio: Atacante intercepta e modifica o ciphertext');
    console.log('üîç Objetivo: Demonstrar que a seguran√ßa detecta adultera√ß√£o\n');

    console.log('üì¶ CIPHERTEXT ORIGINAL:');
    console.log(`   Tamanho: ${messagePackage.ciphertext.length} chars`);
    console.log(`   Primeiros 80 chars: ${messagePackage.ciphertext.substring(0, 80)}...`);
    console.log(`   Assinatura digital: ${messagePackage.signature.substring(0, 60)}...`);

    // Adultera o ciphertext
    const tamperedPackage = { ...messagePackage };
    const originalCiphertext = tamperedPackage.ciphertext;
    tamperedPackage.ciphertext = Buffer.from('MENSAGEM ADULTERADA').toString('base64');

    console.log('\nüíÄ CIPHERTEXT ADULTERADO:');
    console.log(`   Tamanho: ${tamperedPackage.ciphertext.length} chars`);
    console.log(`   Novo valor: ${tamperedPackage.ciphertext}`);
    console.log(`   Assinatura (n√£o modificada): ${tamperedPackage.signature.substring(0, 60)}...`);

    console.log('\n‚ö†Ô∏è  IMPACTO:');
    console.log('   ‚úó Ciphertext foi modificado');
    console.log('   ‚úó Assinatura digital N√ÉO corresponde mais ao novo ciphertext');
    console.log('   ‚úó Valida√ß√£o de assinatura FALHAR√Å');
    console.log('   ‚úó Mensagem ser√° REJEITADA pelo destinat√°rio');

    console.log('\n' + '‚ö†'.repeat(80));
    console.log('üîê Sistema de seguran√ßa detectar√° a adultera√ß√£o!');
    console.log('‚ö†'.repeat(80) + '\n');

    res.json({
      success: true,
      tamperedPackage,
      warning: 'Mensagem foi adulterada intencionalmente para demonstra√ß√£o'
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Inicia servidor
app.listen(PORT, () => {
  console.log('='.repeat(70));
  console.log('INTERFACE WEB - SISTEMA DE COMUNICA√á√ÉO SEGURA');
  console.log('='.repeat(70));
  console.log(`\n‚úì Servidor rodando em: http://localhost:${PORT}`);
  console.log('‚úì Abra o navegador para acessar a interface\n');
  console.log('='.repeat(70));
});
